'use client'

import { useState, useEffect } from 'react'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Plus, Package, ChefHat, ShoppingCart, Table, Edit, Trash2, Settings, TrendingUp, BarChart3 } from 'lucide-react'
import { ProductForm } from '@/components/forms/product-form'
import { RecipeForm } from '@/components/forms/recipe-form'
import { OrderForm } from '@/components/forms/order-form'
import { TableForm } from '@/components/forms/table-form'
import { InventoryMovementForm } from '@/components/forms/inventory-movement-form'
import { SimpleSalesChart } from '@/components/charts/simple-sales-chart'
import { SimpleCategoryChart } from '@/components/charts/simple-category-chart'
import { ReportsFilter } from '@/components/reports/reports-filter'
import { MetricsCard } from '@/components/reports/metrics-card'
import { InventoryStatus } from '@/components/reports/inventory-status'
import { PopularItems } from '@/components/reports/popular-items'
import { useRestaurantStore } from '@/store/restaurant-store'

export default function Home() {
  const [activeTab, setActiveTab] = useState('dashboard')
  const [showProductForm, setShowProductForm] = useState(false)
  const [showRecipeForm, setShowRecipeForm] = useState(false)
  const [showOrderForm, setShowOrderForm] = useState(false)
  const [showTableForm, setShowTableForm] = useState(false)
  const [showInventoryForm, setShowInventoryForm] = useState(false)
  const [editingProduct, setEditingProduct] = useState<any>(null)
  const [editingRecipe, setEditingRecipe] = useState<any>(null)
  const [editingOrder, setEditingOrder] = useState<any>(null)
  const [editingTable, setEditingTable] = useState<any>(null)
  const [editingInventory, setEditingInventory] = useState<any>(null)
  const [isInitialized, setIsInitialized] = useState(false)
  const [reportsData, setReportsData] = useState<any>(null)
  const [filters, setFilters] = useState({
    startDate: '',
    endDate: '',
    reportType: 'sales',
    category: ''
  })

  const { 
    products, 
    recipes, 
    orders, 
    tables, 
    inventoryMovements,
    isLoading, 
    error,
    fetchProducts, 
    fetchRecipes, 
    fetchOrders, 
    fetchTables,
    fetchInventoryMovements,
    deleteProduct,
    deleteRecipe,
    deleteOrder,
    deleteTable
  } = useRestaurantStore()

  const fetchReportsData = async () => {
    try {
      const params = new URLSearchParams()
      if (filters.startDate) params.append('startDate', filters.startDate)
      if (filters.endDate) params.append('endDate', filters.endDate)
      if (filters.reportType) params.append('type', filters.reportType)
      if (filters.category) params.append('category', filters.category)
      
      const response = await fetch(`/api/reports?${params.toString()}`)
      if (response.ok) {
        const data = await response.json()
        setReportsData(data)
      } else {
        console.error('Error response from reports API:', response.status)
        setReportsData(null)
      }
    } catch (error) {
      console.error('Error fetching reports data:', error)
      setReportsData(null)
      // Don't throw error to prevent breaking the application
    }
  }

  const handleFilterChange = (newFilters: any) => {
    setFilters(newFilters)
  }

  const handleExport = () => {
    // Placeholder for export functionality
    alert('Función de exportación será implementada próximamente')
  }

  // Load data when component mounts
  useEffect(() => {
    const loadData = async () => {
      try {
        await Promise.all([
          fetchProducts(),
          fetchRecipes(),
          fetchOrders(),
          fetchTables(),
          fetchInventoryMovements()
        ])
        setIsInitialized(true)
      } catch (error) {
        console.error('Error loading data:', error)
        setIsInitialized(true) // Still mark as initialized to prevent loading state
      }
    }

    loadData().catch(error => {
      console.error('Error in initial data load:', error)
      setIsInitialized(true) // Ensure initialization even on error
    })
  }, [fetchProducts, fetchRecipes, fetchOrders, fetchTables, fetchInventoryMovements])

  // Fetch reports data when reports tab is active or filters change
  useEffect(() => {
    if (activeTab === 'reports') {
      // Add a small delay to avoid initial loading issues
      const timer = setTimeout(() => {
        fetchReportsData().catch(error => {
          console.error('Error in reports data fetch:', error)
          // Ensure reportsData is set to null on error
          setReportsData(null)
        })
      }, 100)
      
      return () => clearTimeout(timer)
    }
  }, [activeTab, filters])

  const handleFormSuccess = () => {
    // Refresh data after form submission
    fetchProducts()
    fetchRecipes()
    fetchOrders()
    fetchTables()
    fetchInventoryMovements()
    // Reset editing states
    setEditingProduct(null)
    setEditingRecipe(null)
    setEditingOrder(null)
    setEditingTable(null)
    setEditingInventory(null)
  }

  const availableTables = tables.filter(table => table.status === 'AVAILABLE')
  const occupiedTables = tables.filter(table => table.status === 'OCCUPIED')
  const pendingOrders = orders.filter(order => order.status === 'PENDING' || order.status === 'CONFIRMED')

  const handleDelete = async (type: string, id: string) => {
    if (!confirm(`¿Estás seguro de que quieres eliminar este ${type}?`)) return

    try {
      switch (type) {
        case 'producto':
          await deleteProduct(id)
          break
        case 'receta':
          await deleteRecipe(id)
          break
        case 'pedido':
          await deleteOrder(id)
          break
        case 'mesa':
          await deleteTable(id)
          break
      }
      handleFormSuccess()
    } catch (error) {
      console.error(`Error deleting ${type}:`, error)
    }
  }

  return (
    <div className="min-h-screen bg-slate-900 text-white p-8">
      <header className="mb-8">
        <h1 className="text-4xl font-bold mb-2">Galaxy Restaurant System</h1>
        <p className="text-slate-400">Sistema de gestión para restaurante</p>
        {error && (
          <div className="mt-2 p-2 bg-red-500/20 border border-red-500/30 rounded">
            <p className="text-red-400 text-sm">Error: {error}</p>
          </div>
        )}
      </header>

      <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
        <TabsList className="grid w-full grid-cols-7">
          <TabsTrigger value="dashboard" className="flex items-center gap-2">
            <Package className="h-4 w-4" />
            Dashboard
          </TabsTrigger>
          <TabsTrigger value="products" className="flex items-center gap-2">
            <Package className="h-4 w-4" />
            Productos
          </TabsTrigger>
          <TabsTrigger value="recipes" className="flex items-center gap-2">
            <ChefHat className="h-4 w-4" />
            Recetas
          </TabsTrigger>
          <TabsTrigger value="orders" className="flex items-center gap-2">
            <ShoppingCart className="h-4 w-4" />
            Pedidos
          </TabsTrigger>
          <TabsTrigger value="tables" className="flex items-center gap-2">
            <Table className="h-4 w-4" />
            Mesas
          </TabsTrigger>
          <TabsTrigger value="inventory" className="flex items-center gap-2">
            <Package className="h-4 w-4" />
            Inventario
          </TabsTrigger>
          <TabsTrigger value="reports" className="flex items-center gap-2">
            <Settings className="h-4 w-4" />
            Reportes
          </TabsTrigger>
        </TabsList>

        <TabsContent value="dashboard" className="space-y-6">
          <div className="mb-4">
            <p className="text-lg">
              Estado: {' '}
              {isLoading ? (
                <Badge variant="secondary">Cargando...</Badge>
              ) : (
                <Badge variant="secondary">Listo</Badge>
              )}
            </p>
          </div>

          {/* Métricas Principales */}
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            <Card className="bg-slate-800 border-slate-700">
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">Productos</CardTitle>
                <Package className="h-4 w-4 text-muted-foreground" />
              </CardHeader>
              <CardContent>
                <div className="text-3xl font-bold text-purple-400">{products.length}</div>
                <p className="text-xs text-muted-foreground">Total en inventario</p>
                <p className="text-xs text-red-400">
                  {products.filter(p => p.stock <= (p.minStock || 0)).length} con bajo stock
                </p>
              </CardContent>
            </Card>

            <Card className="bg-slate-800 border-slate-700">
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">Recetas</CardTitle>
                <ChefHat className="h-4 w-4 text-muted-foreground" />
              </CardHeader>
              <CardContent>
                <div className="text-3xl font-bold text-purple-400">{recipes.length}</div>
                <p className="text-xs text-muted-foreground">Recetas disponibles</p>
                <p className="text-xs text-green-400">
                  {recipes.filter(r => r.isActive).length} activas
                </p>
              </CardContent>
            </Card>

            <Card className="bg-slate-800 border-slate-700">
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">Pedidos</CardTitle>
                <ShoppingCart className="h-4 w-4 text-muted-foreground" />
              </CardHeader>
              <CardContent>
                <div className="text-3xl font-bold text-purple-400">{pendingOrders.length}</div>
                <p className="text-xs text-muted-foreground">Pedidos activos</p>
                <p className="text-xs text-blue-400">
                  {orders.filter(o => o.status === 'PREPARING').length} en preparación
                </p>
              </CardContent>
            </Card>

            <Card className="bg-slate-800 border-slate-700">
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">Mesas</CardTitle>
                <Table className="h-4 w-4 text-muted-foreground" />
              </CardHeader>
              <CardContent>
                <div className="text-3xl font-bold text-purple-400">{tables.length}</div>
                <p className="text-xs text-muted-foreground">
                  {availableTables.length} disponibles
                </p>
                <p className="text-xs text-orange-400">
                  {occupiedTables.length} ocupadas
                </p>
              </CardContent>
            </Card>
          </div>

          {/* Indicadores de Rendimiento */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mt-6">
            <Card className="bg-slate-800 border-slate-700">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Package className="h-5 w-5 text-green-400" />
                  Ingresos del Día
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold text-green-400">$1,247.50</div>
                <p className="text-sm text-slate-400">23 pedidos completados</p>
                <div className="flex items-center gap-2 mt-2">
                  <div className="w-full bg-slate-700 rounded-full h-2">
                    <div className="bg-green-400 h-2 rounded-full" style={{ width: '78%' }}></div>
                  </div>
                  <span className="text-xs text-green-400">+12.5%</span>
                </div>
              </CardContent>
            </Card>

            <Card className="bg-slate-800 border-slate-700">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Package className="h-5 w-5 text-red-400" />
                  Alertas de Inventario
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold text-red-400">
                  {products.filter(p => p.stock <= (p.minStock || 0)).length}
                </div>
                <p className="text-sm text-slate-400">Productos necesitan reposición</p>
                <div className="mt-2 space-y-1">
                  {products.filter(p => p.stock <= (p.minStock || 0)).slice(0, 2).map(product => (
                    <div key={product.id} className="text-xs text-red-400">
                      • {product.name}: {product.stock} {product.unit}
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>

            <Card className="bg-slate-800 border-slate-700">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Table className="h-5 w-5 text-blue-400" />
                  Ocupación en Tiempo Real
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold text-blue-400">
                  {Math.round((occupiedTables.length / tables.length) * 100)}%
                </div>
                <p className="text-sm text-slate-400">
                  {occupiedTables.length} de {tables.length} mesas ocupadas
                </p>
                <div className="flex items-center gap-2 mt-2">
                  <div className="w-full bg-slate-700 rounded-full h-2">
                    <div className="bg-blue-400 h-2 rounded-full" style={{ width: `${(occupiedTables.length / tables.length) * 100}%` }}></div>
                  </div>
                  <span className="text-xs text-blue-400">
                    {occupiedTables.length}/{tables.length}
                  </span>
                </div>
              </CardContent>
            </Card>

            <Card className="bg-slate-800 border-slate-700">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <ChefHat className="h-5 w-5 text-purple-400" />
                  Eficiencia Operativa
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold text-purple-400">94%</div>
                <p className="text-sm text-slate-400">Tiempo promedio servicio: 22min</p>
                <div className="flex items-center gap-2 mt-2">
                  <div className="w-full bg-slate-700 rounded-full h-2">
                    <div className="bg-purple-400 h-2 rounded-full" style={{ width: '94%' }}></div>
                  </div>
                  <span className="text-xs text-purple-400">+3%</span>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* KPIs Adicionales */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mt-6">
            <Card className="bg-slate-800 border-slate-700">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <ShoppingCart className="h-5 w-5 text-yellow-400" />
                  Ticket Promedio
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold text-yellow-400">$54.24</div>
                <p className="text-sm text-slate-400">+8.3% vs mes anterior</p>
                <p className="text-xs text-yellow-400 mt-1">
                  Meta: $58.00
                </p>
              </CardContent>
            </Card>

            <Card className="bg-slate-800 border-slate-700">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Package className="h-5 w-5 text-orange-400" />
                  Costo de Alimentos
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold text-orange-400">28.5%</div>
                <p className="text-sm text-slate-400">Meta: 30% o menos</p>
                <p className="text-xs text-green-400 mt-1">
                  $2.4K ahorrado esta semana
                </p>
              </CardContent>
            </Card>

            <Card className="bg-slate-800 border-slate-700">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Package className="h-5 w-5 text-cyan-400" />
                  Satisfacción Cliente
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold text-cyan-400">4.7/5</div>
                <p className="text-sm text-slate-400">Basado en 156 reseñas</p>
                <div className="flex items-center gap-1 mt-1">
                  {[...Array(5)].map((_, i) => (
                    <span key={i} className="text-cyan-400">★</span>
                  ))}
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Actividad Reciente */}
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mt-6">
            <Card className="bg-slate-800 border-slate-700">
              <CardHeader>
                <CardTitle>Pedidos Recientes</CardTitle>
                <CardDescription>Últimos pedidos en el sistema</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  {orders.slice(0, 4).map((order) => (
                    <div key={order.id} className="flex items-center justify-between p-3 bg-slate-700/50 rounded-lg">
                      <div className="flex-1">
                        <h4 className="font-medium">{order.tableName}</h4>
                        <p className="text-sm text-slate-400">
                          ${order.total} • {order.items.length} items • {order.waiter || 'Sin mesero'}
                        </p>
                        <p className="text-xs text-slate-500">
                          {new Date(order.createdAt).toLocaleString()}
                        </p>
                      </div>
                      <Badge 
                        variant={
                          order.status === 'DELIVERED' ? 'secondary' :
                          order.status === 'PREPARING' ? 'default' :
                          order.status === 'PENDING' ? 'outline' : 'destructive'
                        }
                      >
                        {order.status}
                      </Badge>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>

            <Card className="bg-slate-800 border-slate-700">
              <CardHeader>
                <CardTitle>Movimientos de Inventario</CardTitle>
                <CardDescription>Últimos movimientos registrados</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  {inventoryMovements.slice(0, 4).map((movement) => (
                    <div key={movement.id} className="flex items-center justify-between p-3 bg-slate-700/50 rounded-lg">
                      <div className="flex-1">
                        <h4 className="font-medium">{movement.productName}</h4>
                        <p className="text-sm text-slate-400">
                          {movement.type === 'IN' ? '+' : '-'}{movement.quantity} {movement.unit || 'unidades'} • {movement.user}
                        </p>
                        <p className="text-xs text-slate-500">
                          {new Date(movement.date).toLocaleString()}
                        </p>
                      </div>
                      <Badge variant={movement.type === 'IN' ? 'secondary' : 'destructive'}>
                        {movement.type === 'IN' ? 'ENTRADA' : 'SALIDA'}
                      </Badge>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Estado de Mesas */}
          <Card className="bg-slate-800 border-slate-700 mt-6">
            <CardHeader>
              <CardTitle>Estado de Mesas</CardTitle>
              <CardDescription>Estado actual de todas las mesas del restaurante</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-8 gap-4">
                {tables.map((table) => (
                  <div key={table.id} className="text-center">
                    <div className={`w-16 h-16 mx-auto rounded-full flex items-center justify-center ${
                      table.status === 'AVAILABLE' ? 'bg-green-500/20 border-2 border-green-500' :
                      table.status === 'OCCUPIED' ? 'bg-red-500/20 border-2 border-red-500' :
                      table.status === 'RESERVED' ? 'bg-yellow-500/20 border-2 border-yellow-500' :
                      'bg-gray-500/20 border-2 border-gray-500'
                    }`}>
                      <Table className={`h-6 w-6 ${
                        table.status === 'AVAILABLE' ? 'text-green-400' :
                        table.status === 'OCCUPIED' ? 'text-red-400' :
                        table.status === 'RESERVED' ? 'text-yellow-400' :
                        'text-gray-400'
                      }`} />
                    </div>
                    <p className="text-sm font-medium mt-2">{table.name}</p>
                    <p className="text-xs text-slate-400">{table.capacity} personas</p>
                    <Badge 
                      variant={
                        table.status === 'AVAILABLE' ? 'secondary' :
                        table.status === 'OCCUPIED' ? 'destructive' :
                        table.status === 'RESERVED' ? 'outline' : 'default'
                      }
                      className="text-xs mt-1"
                    >
                      {table.status === 'AVAILABLE' ? 'DISPONIBLE' :
                       table.status === 'OCCUPIED' ? 'OCUPADA' :
                       table.status === 'RESERVED' ? 'RESERVADA' : 'MANTENIMIENTO'}
                    </Badge>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="products" className="space-y-6">
          <div className="flex items-center justify-between">
            <h2 className="text-2xl font-bold">Gestión de Productos</h2>
            <Button onClick={() => setShowProductForm(true)}>
              <Plus className="h-4 w-4 mr-2" />
              Agregar Producto
            </Button>
          </div>
          
          <div className="grid gap-4">
            <Card className="bg-slate-800 border-slate-700">
              <CardHeader>
                <CardTitle>Lista de Productos</CardTitle>
                <CardDescription>Administra los productos del inventario</CardDescription>
              </CardHeader>
              <CardContent>
                {isLoading && !isInitialized ? (
                  <p className="text-slate-400">Cargando productos...</p>
                ) : products.length === 0 ? (
                  <p className="text-slate-400">No hay productos disponibles</p>
                ) : (
                  <div className="space-y-2">
                    {products.map((product) => (
                      <div key={product.id} className="flex items-center justify-between p-3 bg-slate-700/50 rounded-lg">
                        <div className="flex-1">
                          <h4 className="font-medium">{product.name}</h4>
                          <p className="text-sm text-slate-400">
                            {product.stock} {product.unit} • ${product.cost} • {product.category}
                          </p>
                        </div>
                        <div className="flex items-center gap-2">
                          <Badge variant={product.stock > (product.minStock || 0) ? "secondary" : "destructive"}>
                            {product.stock > (product.minStock || 0) ? "OK" : "BAJO STOCK"}
                          </Badge>
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={() => setEditingProduct(product)}
                            className="text-purple-300 hover:text-white"
                          >
                            <Edit className="h-4 w-4" />
                          </Button>
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={() => handleDelete('producto', product.id)}
                            className="text-red-400 hover:text-red-300"
                          >
                            <Trash2 className="h-4 w-4" />
                          </Button>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        <TabsContent value="recipes" className="space-y-6">
          <div className="flex items-center justify-between">
            <h2 className="text-2xl font-bold">Gestión de Recetas</h2>
            <Button onClick={() => setShowRecipeForm(true)}>
              <Plus className="h-4 w-4 mr-2" />
              Agregar Receta
            </Button>
          </div>
          
          <div className="grid gap-4">
            <Card className="bg-slate-800 border-slate-700">
              <CardHeader>
                <CardTitle>Lista de Recetas</CardTitle>
                <CardDescription>Administra las recetas del menú</CardDescription>
              </CardHeader>
              <CardContent>
                {isLoading && !isInitialized ? (
                  <p className="text-slate-400">Cargando recetas...</p>
                ) : recipes.length === 0 ? (
                  <p className="text-slate-400">No hay recetas disponibles</p>
                ) : (
                  <div className="space-y-2">
                    {recipes.map((recipe) => (
                      <div key={recipe.id} className="flex items-center justify-between p-3 bg-slate-700/50 rounded-lg">
                        <div className="flex-1">
                          <h4 className="font-medium">{recipe.name}</h4>
                          <p className="text-sm text-slate-400">
                            ${recipe.price} • {recipe.category} • {recipe.preparationTime}min
                          </p>
                          <p className="text-xs text-slate-500">{recipe.description}</p>
                          <p className="text-xs text-purple-400">
                            {recipe.ingredients?.length || 0} ingredientes
                          </p>
                        </div>
                        <div className="flex items-center gap-2">
                          <Badge variant={recipe.isActive ? "secondary" : "destructive"}>
                            {recipe.isActive ? "ACTIVA" : "INACTIVA"}
                          </Badge>
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={() => setEditingRecipe(recipe)}
                            className="text-purple-300 hover:text-white"
                          >
                            <Edit className="h-4 w-4" />
                          </Button>
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={() => handleDelete('receta', recipe.id)}
                            className="text-red-400 hover:text-red-300"
                          >
                            <Trash2 className="h-4 w-4" />
                          </Button>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        <TabsContent value="orders" className="space-y-6">
          <div className="flex items-center justify-between">
            <h2 className="text-2xl font-bold">Gestión de Pedidos</h2>
            <Button onClick={() => setShowOrderForm(true)}>
              <Plus className="h-4 w-4 mr-2" />
              Nuevo Pedido
            </Button>
          </div>
          
          <div className="grid gap-4">
            <Card className="bg-slate-800 border-slate-700">
              <CardHeader>
                <CardTitle>Lista de Pedidos</CardTitle>
                <CardDescription>Administra los pedidos de los clientes</CardDescription>
              </CardHeader>
              <CardContent>
                {isLoading && !isInitialized ? (
                  <p className="text-slate-400">Cargando pedidos...</p>
                ) : orders.length === 0 ? (
                  <p className="text-slate-400">No hay pedidos activos</p>
                ) : (
                  <div className="space-y-2">
                    {orders.map((order) => (
                      <div key={order.id} className="flex items-center justify-between p-3 bg-slate-700/50 rounded-lg">
                        <div className="flex-1">
                          <h4 className="font-medium">{order.tableName}</h4>
                          <p className="text-sm text-slate-400">
                            ${order.total} • {order.items.length} items • {order.waiter || 'Sin mesero'}
                          </p>
                          <p className="text-xs text-slate-500">{order.notes}</p>
                          <div className="flex gap-2 mt-1">
                            {order.items.map((item: any, index: number) => (
                              <Badge key={index} variant="outline" className="text-xs">
                                {item.name} x{item.quantity}
                              </Badge>
                            ))}
                          </div>
                        </div>
                        <div className="flex items-center gap-2">
                          <Badge variant={
                            order.status === 'DELIVERED' ? "secondary" : 
                            order.status === 'CANCELLED' ? "destructive" : "default"
                          }>
                            {order.status}
                          </Badge>
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={() => setEditingOrder(order)}
                            className="text-purple-300 hover:text-white"
                          >
                            <Edit className="h-4 w-4" />
                          </Button>
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={() => handleDelete('pedido', order.id)}
                            className="text-red-400 hover:text-red-300"
                          >
                            <Trash2 className="h-4 w-4" />
                          </Button>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        <TabsContent value="tables" className="space-y-6">
          <div className="flex items-center justify-between">
            <h2 className="text-2xl font-bold">Gestión de Mesas</h2>
            <Button onClick={() => setShowTableForm(true)}>
              <Plus className="h-4 w-4 mr-2" />
              Agregar Mesa
            </Button>
          </div>
          
          <div className="grid gap-4">
            <Card className="bg-slate-800 border-slate-700">
              <CardHeader>
                <CardTitle>Lista de Mesas</CardTitle>
                <CardDescription>Administra las mesas del restaurante</CardDescription>
              </CardHeader>
              <CardContent>
                {isLoading && !isInitialized ? (
                  <p className="text-slate-400">Cargando mesas...</p>
                ) : tables.length === 0 ? (
                  <p className="text-slate-400">No hay mesas disponibles</p>
                ) : (
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
                    {tables.map((table) => (
                      <div key={table.id} className="p-4 bg-slate-700/50 rounded-lg">
                        <div className="flex items-center justify-between mb-2">
                          <h4 className="font-medium">{table.name}</h4>
                          <div className="flex items-center gap-1">
                            <Badge variant={
                              table.status === 'AVAILABLE' ? "secondary" : 
                              table.status === 'OCCUPIED' ? "destructive" : "outline"
                            }>
                              {table.status}
                            </Badge>
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={() => setEditingTable(table)}
                              className="text-purple-300 hover:text-white h-6 w-6 p-0"
                            >
                              <Edit className="h-3 w-3" />
                            </Button>
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={() => handleDelete('mesa', table.id)}
                              className="text-red-400 hover:text-red-300 h-6 w-6 p-0"
                            >
                              <Trash2 className="h-3 w-3" />
                            </Button>
                          </div>
                        </div>
                        <p className="text-sm text-slate-400">
                          Capacidad: {table.capacity} personas
                        </p>
                        {table.location && (
                          <p className="text-xs text-slate-500">{table.location}</p>
                        )}
                      </div>
                    ))}
                  </div>
                )}
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        <TabsContent value="inventory" className="space-y-6">
          <div className="flex items-center justify-between">
            <h2 className="text-2xl font-bold">Gestión de Inventario</h2>
            <Button onClick={() => setShowInventoryForm(true)}>
              <Plus className="h-4 w-4 mr-2" />
              Registrar Movimiento
            </Button>
          </div>
          
          <div className="grid gap-4">
            <Card className="bg-slate-800 border-slate-700">
              <CardHeader>
                <CardTitle>Movimientos de Inventario</CardTitle>
                <CardDescription>Historial de movimientos del inventario</CardDescription>
              </CardHeader>
              <CardContent>
                {isLoading && !isInitialized ? (
                  <p className="text-slate-400">Cargando movimientos...</p>
                ) : inventoryMovements.length === 0 ? (
                  <p className="text-slate-400">No hay movimientos registrados</p>
                ) : (
                  <div className="space-y-2 max-h-96 overflow-y-auto">
                    {inventoryMovements.map((movement) => (
                      <div key={movement.id} className="flex items-center justify-between p-3 bg-slate-700/50 rounded-lg">
                        <div className="flex-1">
                          <h4 className="font-medium">{movement.productName}</h4>
                          <p className="text-sm text-slate-400">
                            {movement.type === 'IN' ? '+' : '-'}{movement.quantity} {movement.unit || 'unidades'} • {movement.user}
                          </p>
                          <p className="text-xs text-slate-500">{movement.notes}</p>
                          <p className="text-xs text-purple-400">
                            {movement.referenceType} • {new Date(movement.date).toLocaleString()}
                          </p>
                        </div>
                        <div className="flex items-center gap-2">
                          <Badge variant={movement.type === 'IN' ? "secondary" : "destructive"}>
                            {movement.type === 'IN' ? 'ENTRADA' : 'SALIDA'}
                          </Badge>
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={() => setEditingInventory(movement)}
                            className="text-purple-300 hover:text-white"
                          >
                            <Edit className="h-4 w-4" />
                          </Button>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        <TabsContent value="reports" className="space-y-6">
          {/* Filtros */}
          <ReportsFilter 
            onFilterChange={handleFilterChange}
            onExport={handleExport}
          />
          
          <div className="flex items-center justify-between">
            <h2 className="text-2xl font-bold text-white">Reportes y Estadísticas</h2>
            <div className="flex gap-2">
              <Button variant="outline" onClick={() => {
                fetchReportsData().catch(error => {
                  console.error('Error fetching reports data:', error)
                  setReportsData(null)
                })
              }}>
                <BarChart3 className="h-4 w-4 mr-2" />
                {reportsData ? 'Actualizar Datos' : 'Cargar Datos'}
              </Button>
            </div>
          </div>
          
          {/* Métricas Principales */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            <MetricsCard
              title="Ventas del Día"
              value="$1,247.50"
              subtitle="23 pedidos"
              trend={{ value: "+12.5%", type: "positive" }}
              icon={TrendingUp}
              iconColor="text-green-400"
            />

            <MetricsCard
              title="Productos Críticos"
              value="3"
              subtitle="Bajo stock mínimo"
              trend={{ value: "Requieren reposición", type: "negative" }}
              icon={Package}
              iconColor="text-red-400"
            />

            <MetricsCard
              title="Ocupación Mesas"
              value="75%"
              subtitle="6 de 8 mesas ocupadas"
              trend={{ value: "Horario pico", type: "neutral" }}
              icon={BarChart3}
              iconColor="text-blue-400"
            />

            <MetricsCard
              title="Eficiencia Cocina"
              value="92%"
              subtitle="Tiempo promedio 18min"
              trend={{ value: "+5% vs semana anterior", type: "positive" }}
              icon={ChefHat}
              iconColor="text-purple-400"
            />
          </div>

          {/* Reportes Detallados */}
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mt-6">
            {/* Gráfico de Ventas por Hora */}
            <SimpleSalesChart 
              data={[
                { hour: '12:00', sales: 340, orders: 8 },
                { hour: '13:00', sales: 380, orders: 9 },
                { hour: '14:00', sales: 280, orders: 6 },
                { hour: '19:00', sales: 360, orders: 8 },
                { hour: '20:00', sales: 300, orders: 7 },
                { hour: '21:00', sales: 250, orders: 5 },
              ]}
            />

            {/* Gráfico de Categorías */}
            <SimpleCategoryChart 
              data={[
                { name: 'Platos Principales', value: 54, revenue: 680, orders: 18 },
                { name: 'Entradas', value: 26, revenue: 320, orders: 12 },
                { name: 'Bebidas', value: 14, revenue: 180, orders: 15 },
                { name: 'Postres', value: 6, revenue: 67.50, orders: 6 },
              ]}
            />
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mt-6">
            {/* Estado del Inventario */}
            <InventoryStatus 
              items={[
                { name: 'Harina', currentStock: 5, minStock: 10, unit: 'kg' },
                { name: 'Lechuga', currentStock: 8, minStock: 5, unit: 'kg' },
                { name: 'Tomate', currentStock: 50, minStock: 10, unit: 'kg' },
                { name: 'Pollo', currentStock: 15, minStock: 8, unit: 'kg' },
              ]}
            />

            {/* Platos Más Populares */}
            <PopularItems 
              items={[
                { name: 'Hamburguesa Clásica', orders: 15, revenue: 225.00 },
                { name: 'Ensalada César', orders: 8, revenue: 76.00 },
                { name: 'Papas Fritas', orders: 12, revenue: 54.00 },
                { name: 'Pollo Frito', orders: 6, revenue: 78.00 },
              ]}
            />
          </div>

          {/* Métricas Adicionales */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mt-6">
            <MetricsCard
              title="Ticket Promedio"
              value="$54.24"
              subtitle="+8.3% vs mes anterior"
              icon={TrendingUp}
              iconColor="text-yellow-400"
            />

            <MetricsCard
              title="Costo de Alimentos"
              value="28.5%"
              subtitle="Meta: 30% o menos"
              icon={Package}
              iconColor="text-orange-400"
            />

            <MetricsCard
              title="Tiempo Promedio"
              value="45min"
              subtitle="Por mesa ocupada"
              icon={Table}
              iconColor="text-cyan-400"
            />
          </div>

          {/* Actividad Reciente */}
          <Card className="bg-slate-800 border-slate-700 mt-6">
            <CardHeader>
              <CardTitle className="text-white">Actividad Reciente del Sistema</CardTitle>
              <CardDescription className="text-slate-400">Últimas acciones y movimientos</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                <div className="flex items-center justify-between p-3 bg-slate-700/50 rounded-lg">
                  <div className="flex-1">
                    <h4 className="font-medium text-white">Nuevo pedido creado</h4>
                    <p className="text-sm text-slate-400">Mesa 3 • 3 items • $67.95</p>
                  </div>
                  <div className="text-xs text-slate-500">Hace 5 min</div>
                </div>
                <div className="flex items-center justify-between p-3 bg-slate-700/50 rounded-lg">
                  <div className="flex-1">
                    <h4 className="font-medium text-white">Entrada de inventario</h4>
                    <p className="text-sm text-slate-400">Tomate • +20kg • Compra</p>
                  </div>
                  <div className="text-xs text-slate-500">Hace 15 min</div>
                </div>
                <div className="flex items-center justify-between p-3 bg-slate-700/50 rounded-lg">
                  <div className="flex-1">
                    <h4 className="font-medium text-white">Pedido entregado</h4>
                    <p className="text-sm text-slate-400">Mesa 1 • 4 items • $89.92</p>
                  </div>
                  <div className="text-xs text-slate-500">Hace 30 min</div>
                </div>
                <div className="flex items-center justify-between p-3 bg-slate-700/50 rounded-lg">
                  <div className="flex-1">
                    <h4 className="font-medium text-white">Mesa liberada</h4>
                    <p className="text-sm text-slate-400">Mesa 2 • Disponible ahora</p>
                  </div>
                  <div className="text-xs text-slate-500">Hace 45 min</div>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>

      {/* Modal Forms */}
      {(showProductForm || editingProduct) && (
        <ProductForm 
          product={editingProduct}
          onClose={() => {
            setShowProductForm(false)
            setEditingProduct(null)
          }}
          onSuccess={handleFormSuccess}
        />
      )}

      {(showRecipeForm || editingRecipe) && (
        <RecipeForm 
          recipe={editingRecipe}
          onClose={() => {
            setShowRecipeForm(false)
            setEditingRecipe(null)
          }}
          onSuccess={handleFormSuccess}
        />
      )}

      {(showOrderForm || editingOrder) && (
        <OrderForm 
          order={editingOrder}
          onClose={() => {
            setShowOrderForm(false)
            setEditingOrder(null)
          }}
          onSuccess={handleFormSuccess}
        />
      )}

      {(showTableForm || editingTable) && (
        <TableForm 
          table={editingTable}
          onClose={() => {
            setShowTableForm(false)
            setEditingTable(null)
          }}
          onSuccess={handleFormSuccess}
        />
      )}

      {(showInventoryForm || editingInventory) && (
        <InventoryMovementForm 
          movement={editingInventory}
          onClose={() => {
            setShowInventoryForm(false)
            setEditingInventory(null)
          }}
          onSuccess={handleFormSuccess}
        />
      )}
    </div>
  )
}